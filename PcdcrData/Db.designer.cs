#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PcdcrData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HerooDb")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmpTable(EmpTable instance);
    partial void UpdateEmpTable(EmpTable instance);
    partial void DeleteEmpTable(EmpTable instance);
    partial void InsertWorkTable(WorkTable instance);
    partial void UpdateWorkTable(WorkTable instance);
    partial void DeleteWorkTable(WorkTable instance);
    partial void InsertHoldyTable(HoldyTable instance);
    partial void UpdateHoldyTable(HoldyTable instance);
    partial void DeleteHoldyTable(HoldyTable instance);
    partial void InsertUserTable(UserTable instance);
    partial void UpdateUserTable(UserTable instance);
    partial void DeleteUserTable(UserTable instance);
    partial void InsertLeaveTable(LeaveTable instance);
    partial void UpdateLeaveTable(LeaveTable instance);
    partial void DeleteLeaveTable(LeaveTable instance);
    #endregion
		
		public DbDataContext() : 
				base(global::PcdcrData.Properties.Settings.Default.HerooDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EmpTable> EmpTables
		{
			get
			{
				return this.GetTable<EmpTable>();
			}
		}
		
		public System.Data.Linq.Table<WorkTable> WorkTables
		{
			get
			{
				return this.GetTable<WorkTable>();
			}
		}
		
		public System.Data.Linq.Table<HoldyTable> HoldyTables
		{
			get
			{
				return this.GetTable<HoldyTable>();
			}
		}
		
		public System.Data.Linq.Table<UserTable> UserTables
		{
			get
			{
				return this.GetTable<UserTable>();
			}
		}
		
		public System.Data.Linq.Table<LeaveTable> LeaveTables
		{
			get
			{
				return this.GetTable<LeaveTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpTable")]
	public partial class EmpTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EmpName;
		
		private string _EmpNo;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _EndTime;
		
		private string _Pssword;
		
		private System.Nullable<double> _WorkTimeNo;
		
		private EntitySet<WorkTable> _WorkTables;
		
		private EntitySet<HoldyTable> _HoldyTables;
		
		private EntitySet<LeaveTable> _LeaveTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnEmpNoChanging(string value);
    partial void OnEmpNoChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEndTimeChanged();
    partial void OnPsswordChanging(string value);
    partial void OnPsswordChanged();
    partial void OnWorkTimeNoChanging(System.Nullable<double> value);
    partial void OnWorkTimeNoChanged();
    #endregion
		
		public EmpTable()
		{
			this._WorkTables = new EntitySet<WorkTable>(new Action<WorkTable>(this.attach_WorkTables), new Action<WorkTable>(this.detach_WorkTables));
			this._HoldyTables = new EntitySet<HoldyTable>(new Action<HoldyTable>(this.attach_HoldyTables), new Action<HoldyTable>(this.detach_HoldyTables));
			this._LeaveTables = new EntitySet<LeaveTable>(new Action<LeaveTable>(this.attach_LeaveTables), new Action<LeaveTable>(this.detach_LeaveTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="NVarChar(50)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpNo", DbType="NVarChar(50)")]
		public string EmpNo
		{
			get
			{
				return this._EmpNo;
			}
			set
			{
				if ((this._EmpNo != value))
				{
					this.OnEmpNoChanging(value);
					this.SendPropertyChanging();
					this._EmpNo = value;
					this.SendPropertyChanged("EmpNo");
					this.OnEmpNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pssword", DbType="NVarChar(50)")]
		public string Pssword
		{
			get
			{
				return this._Pssword;
			}
			set
			{
				if ((this._Pssword != value))
				{
					this.OnPsswordChanging(value);
					this.SendPropertyChanging();
					this._Pssword = value;
					this.SendPropertyChanged("Pssword");
					this.OnPsswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkTimeNo", DbType="Float")]
		public System.Nullable<double> WorkTimeNo
		{
			get
			{
				return this._WorkTimeNo;
			}
			set
			{
				if ((this._WorkTimeNo != value))
				{
					this.OnWorkTimeNoChanging(value);
					this.SendPropertyChanging();
					this._WorkTimeNo = value;
					this.SendPropertyChanged("WorkTimeNo");
					this.OnWorkTimeNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpTable_WorkTable", Storage="_WorkTables", ThisKey="Id", OtherKey="EmpId")]
		public EntitySet<WorkTable> WorkTables
		{
			get
			{
				return this._WorkTables;
			}
			set
			{
				this._WorkTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpTable_HoldyTable", Storage="_HoldyTables", ThisKey="Id", OtherKey="EmpID")]
		public EntitySet<HoldyTable> HoldyTables
		{
			get
			{
				return this._HoldyTables;
			}
			set
			{
				this._HoldyTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpTable_LeaveTable", Storage="_LeaveTables", ThisKey="Id", OtherKey="EmpId")]
		public EntitySet<LeaveTable> LeaveTables
		{
			get
			{
				return this._LeaveTables;
			}
			set
			{
				this._LeaveTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkTables(WorkTable entity)
		{
			this.SendPropertyChanging();
			entity.EmpTable = this;
		}
		
		private void detach_WorkTables(WorkTable entity)
		{
			this.SendPropertyChanging();
			entity.EmpTable = null;
		}
		
		private void attach_HoldyTables(HoldyTable entity)
		{
			this.SendPropertyChanging();
			entity.EmpTable = this;
		}
		
		private void detach_HoldyTables(HoldyTable entity)
		{
			this.SendPropertyChanging();
			entity.EmpTable = null;
		}
		
		private void attach_LeaveTables(LeaveTable entity)
		{
			this.SendPropertyChanging();
			entity.EmpTable = this;
		}
		
		private void detach_LeaveTables(LeaveTable entity)
		{
			this.SendPropertyChanging();
			entity.EmpTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkTable")]
	public partial class WorkTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _EmpId;
		
		private System.Nullable<System.DateTime> _WorkDate;
		
		private System.Nullable<System.TimeSpan> _startTime;
		
		private System.Nullable<System.TimeSpan> _endtime;
		
		private System.Nullable<double> _RealWorkTimeNo;
		
		private System.Nullable<double> _WorkTime;
		
		private System.Nullable<double> _DefernceTime;
		
		private string _WorkFinsh;
		
		private EntityRef<EmpTable> _EmpTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmpIdChanging(System.Nullable<int> value);
    partial void OnEmpIdChanged();
    partial void OnWorkDateChanging(System.Nullable<System.DateTime> value);
    partial void OnWorkDateChanged();
    partial void OnstartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnstartTimeChanged();
    partial void OnendtimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnendtimeChanged();
    partial void OnRealWorkTimeNoChanging(System.Nullable<double> value);
    partial void OnRealWorkTimeNoChanged();
    partial void OnWorkTimeChanging(System.Nullable<double> value);
    partial void OnWorkTimeChanged();
    partial void OnDefernceTimeChanging(System.Nullable<double> value);
    partial void OnDefernceTimeChanged();
    partial void OnWorkFinshChanging(string value);
    partial void OnWorkFinshChanged();
    #endregion
		
		public WorkTable()
		{
			this._EmpTable = default(EntityRef<EmpTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int")]
		public System.Nullable<int> EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					if (this._EmpTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkDate", DbType="Date")]
		public System.Nullable<System.DateTime> WorkDate
		{
			get
			{
				return this._WorkDate;
			}
			set
			{
				if ((this._WorkDate != value))
				{
					this.OnWorkDateChanging(value);
					this.SendPropertyChanging();
					this._WorkDate = value;
					this.SendPropertyChanged("WorkDate");
					this.OnWorkDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endtime", DbType="Time")]
		public System.Nullable<System.TimeSpan> endtime
		{
			get
			{
				return this._endtime;
			}
			set
			{
				if ((this._endtime != value))
				{
					this.OnendtimeChanging(value);
					this.SendPropertyChanging();
					this._endtime = value;
					this.SendPropertyChanged("endtime");
					this.OnendtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealWorkTimeNo", DbType="Float")]
		public System.Nullable<double> RealWorkTimeNo
		{
			get
			{
				return this._RealWorkTimeNo;
			}
			set
			{
				if ((this._RealWorkTimeNo != value))
				{
					this.OnRealWorkTimeNoChanging(value);
					this.SendPropertyChanging();
					this._RealWorkTimeNo = value;
					this.SendPropertyChanged("RealWorkTimeNo");
					this.OnRealWorkTimeNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkTime", DbType="Float")]
		public System.Nullable<double> WorkTime
		{
			get
			{
				return this._WorkTime;
			}
			set
			{
				if ((this._WorkTime != value))
				{
					this.OnWorkTimeChanging(value);
					this.SendPropertyChanging();
					this._WorkTime = value;
					this.SendPropertyChanged("WorkTime");
					this.OnWorkTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefernceTime", DbType="Float")]
		public System.Nullable<double> DefernceTime
		{
			get
			{
				return this._DefernceTime;
			}
			set
			{
				if ((this._DefernceTime != value))
				{
					this.OnDefernceTimeChanging(value);
					this.SendPropertyChanging();
					this._DefernceTime = value;
					this.SendPropertyChanged("DefernceTime");
					this.OnDefernceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkFinsh", DbType="NVarChar(50)")]
		public string WorkFinsh
		{
			get
			{
				return this._WorkFinsh;
			}
			set
			{
				if ((this._WorkFinsh != value))
				{
					this.OnWorkFinshChanging(value);
					this.SendPropertyChanging();
					this._WorkFinsh = value;
					this.SendPropertyChanged("WorkFinsh");
					this.OnWorkFinshChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpTable_WorkTable", Storage="_EmpTable", ThisKey="EmpId", OtherKey="Id", IsForeignKey=true)]
		public EmpTable EmpTable
		{
			get
			{
				return this._EmpTable.Entity;
			}
			set
			{
				EmpTable previousValue = this._EmpTable.Entity;
				if (((previousValue != value) 
							|| (this._EmpTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpTable.Entity = null;
						previousValue.WorkTables.Remove(this);
					}
					this._EmpTable.Entity = value;
					if ((value != null))
					{
						value.WorkTables.Add(this);
						this._EmpId = value.Id;
					}
					else
					{
						this._EmpId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HoldyTable")]
	public partial class HoldyTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _EmpID;
		
		private System.Nullable<System.DateTime> _HoldyDate;
		
		private string _HoldType;
		
		private EntityRef<EmpTable> _EmpTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmpIDChanging(System.Nullable<int> value);
    partial void OnEmpIDChanged();
    partial void OnHoldyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHoldyDateChanged();
    partial void OnHoldTypeChanging(string value);
    partial void OnHoldTypeChanged();
    #endregion
		
		public HoldyTable()
		{
			this._EmpTable = default(EntityRef<EmpTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="Int")]
		public System.Nullable<int> EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._EmpTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldyDate", DbType="Date")]
		public System.Nullable<System.DateTime> HoldyDate
		{
			get
			{
				return this._HoldyDate;
			}
			set
			{
				if ((this._HoldyDate != value))
				{
					this.OnHoldyDateChanging(value);
					this.SendPropertyChanging();
					this._HoldyDate = value;
					this.SendPropertyChanged("HoldyDate");
					this.OnHoldyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldType", DbType="NVarChar(50)")]
		public string HoldType
		{
			get
			{
				return this._HoldType;
			}
			set
			{
				if ((this._HoldType != value))
				{
					this.OnHoldTypeChanging(value);
					this.SendPropertyChanging();
					this._HoldType = value;
					this.SendPropertyChanged("HoldType");
					this.OnHoldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpTable_HoldyTable", Storage="_EmpTable", ThisKey="EmpID", OtherKey="Id", IsForeignKey=true)]
		public EmpTable EmpTable
		{
			get
			{
				return this._EmpTable.Entity;
			}
			set
			{
				EmpTable previousValue = this._EmpTable.Entity;
				if (((previousValue != value) 
							|| (this._EmpTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpTable.Entity = null;
						previousValue.HoldyTables.Remove(this);
					}
					this._EmpTable.Entity = value;
					if ((value != null))
					{
						value.HoldyTables.Add(this);
						this._EmpID = value.Id;
					}
					else
					{
						this._EmpID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public UserTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeaveTable")]
	public partial class LeaveTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _EmpId;
		
		private System.Nullable<System.DateTime> _LeaveDate;
		
		private System.Nullable<System.TimeSpan> _LeaveTime;
		
		private System.Nullable<System.TimeSpan> _BackTime;
		
		private System.Nullable<double> _TotalHouer;
		
		private string _LeaveType;
		
		private EntityRef<EmpTable> _EmpTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmpIdChanging(System.Nullable<int> value);
    partial void OnEmpIdChanged();
    partial void OnLeaveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveDateChanged();
    partial void OnLeaveTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnLeaveTimeChanged();
    partial void OnBackTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnBackTimeChanged();
    partial void OnTotalHouerChanging(System.Nullable<double> value);
    partial void OnTotalHouerChanged();
    partial void OnLeaveTypeChanging(string value);
    partial void OnLeaveTypeChanged();
    #endregion
		
		public LeaveTable()
		{
			this._EmpTable = default(EntityRef<EmpTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int")]
		public System.Nullable<int> EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					if (this._EmpTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="Date")]
		public System.Nullable<System.DateTime> LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> LeaveTime
		{
			get
			{
				return this._LeaveTime;
			}
			set
			{
				if ((this._LeaveTime != value))
				{
					this.OnLeaveTimeChanging(value);
					this.SendPropertyChanging();
					this._LeaveTime = value;
					this.SendPropertyChanged("LeaveTime");
					this.OnLeaveTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> BackTime
		{
			get
			{
				return this._BackTime;
			}
			set
			{
				if ((this._BackTime != value))
				{
					this.OnBackTimeChanging(value);
					this.SendPropertyChanging();
					this._BackTime = value;
					this.SendPropertyChanged("BackTime");
					this.OnBackTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalHouer", DbType="Float")]
		public System.Nullable<double> TotalHouer
		{
			get
			{
				return this._TotalHouer;
			}
			set
			{
				if ((this._TotalHouer != value))
				{
					this.OnTotalHouerChanging(value);
					this.SendPropertyChanging();
					this._TotalHouer = value;
					this.SendPropertyChanged("TotalHouer");
					this.OnTotalHouerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveType", DbType="NVarChar(50)")]
		public string LeaveType
		{
			get
			{
				return this._LeaveType;
			}
			set
			{
				if ((this._LeaveType != value))
				{
					this.OnLeaveTypeChanging(value);
					this.SendPropertyChanging();
					this._LeaveType = value;
					this.SendPropertyChanged("LeaveType");
					this.OnLeaveTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpTable_LeaveTable", Storage="_EmpTable", ThisKey="EmpId", OtherKey="Id", IsForeignKey=true)]
		public EmpTable EmpTable
		{
			get
			{
				return this._EmpTable.Entity;
			}
			set
			{
				EmpTable previousValue = this._EmpTable.Entity;
				if (((previousValue != value) 
							|| (this._EmpTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpTable.Entity = null;
						previousValue.LeaveTables.Remove(this);
					}
					this._EmpTable.Entity = value;
					if ((value != null))
					{
						value.LeaveTables.Add(this);
						this._EmpId = value.Id;
					}
					else
					{
						this._EmpId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
